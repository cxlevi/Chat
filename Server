using MySql.Data.MySqlClient;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

public class Server
{
    private Dictionary<int, TcpClient> connectedClients = new Dictionary<int, TcpClient>();
    private readonly TcpListener _listener;
    private readonly List<TcpClient> _clients = new List<TcpClient>();

    public Server(string ip, int port)
    {
        _listener = new TcpListener(IPAddress.Parse(ip), port);
    }

    public async Task StartAsync()
    {
        _listener.Start();
        Console.WriteLine("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...");

        while (true)
        {
            var client = await _listener.AcceptTcpClientAsync();
            Console.WriteLine($"üü¢ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {client.Client.RemoteEndPoint}");
            _clients.Add(client);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            _ = HandleClientAsync(client);
        }
    }

    private async Task HandleClientAsync(TcpClient client)
    {
        var stream = client.GetStream();
        var reader = new StreamReader(stream, Encoding.UTF8);

        // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        string intro = await reader.ReadLineAsync();
        int userId = -1;

        if (intro != null && intro.StartsWith("USERID:"))
        {
            userId = int.Parse(intro.Substring(7));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if (UserExistsInDatabase(userId))
            {
                connectedClients[userId] = client;
                Console.WriteLine($"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {userId} –ø–æ–¥–∫–ª—é—á–µ–Ω.");
            }
            else
            {
                Console.WriteLine($"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {userId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.");
                client.Close();
                return;
            }
        }
        else
        {
            Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
            client.Close();
            return;
        }

        // –ü–µ—Ä–µ–¥–∞–µ–º userId –≤ ListenToClientAsync
        await ListenToClientAsync(userId, client, reader);
    }

    private bool UserExistsInDatabase(int userId)
    {
        string connectionString = "Server=sql8.freesqldatabase.com;" +
                                   "Database=sql8771867;" +
                                   "User=sql8771867;" +
                                   "Password=zhx9FVLUs5;" +
                                   "Port=3306;" +
                                   "CharSet=utf8mb4;";

        using (var connection = new MySqlConnection(connectionString))
        {
            connection.Open();

            string query = "SELECT COUNT(*) FROM Users WHERE UserID = @UserID";

            using (var command = new MySqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@UserID", userId);
                var result = command.ExecuteScalar();

                return Convert.ToInt32(result) > 0;
            }
        }
    }

    private async Task ListenToClientAsync(int userId, TcpClient client, StreamReader reader)
    {
        string line;
        while ((line = await reader.ReadLineAsync()) != null)
        {
            Console.WriteLine($"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {userId}: {line}"); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if (line.StartsWith("TO:"))
            {
                var parts = line.Split('|');
                var receiverId = int.Parse(parts[0].Substring(3));
                var messageText = parts[1];

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                SaveMessageToDatabase(userId, receiverId, messageText);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
                if (connectedClients.TryGetValue(receiverId, out TcpClient targetClient))
                {
                    var targetWriter = new StreamWriter(targetClient.GetStream(), Encoding.UTF8) { AutoFlush = true };
                    Console.WriteLine($"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {userId} –∫ {receiverId}: {messageText}");

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await targetWriter.WriteLineAsync(messageText);
                }
                else
                {
                    Console.WriteLine($"‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID {receiverId} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.");
                }
            }
        }
    }

    private async Task SendMessageToClientAsync(TcpClient client, string message)
    {
        try
        {
            var writer = new StreamWriter(client.GetStream(), Encoding.UTF8) { AutoFlush = true };
            await writer.WriteLineAsync(message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {ex.Message}");
        }
    }

    private List<int> GetGroupMembers(int groupId)
    {
        var members = new List<int>();
        string connectionString = "Server=sql8.freesqldatabase.com;" +
                                   "Database=sql8771867;" +
                                   "User=sql8771867;" +
                                   "Password=zhx9FVLUs5;" +
                                   "Port=3306;" +
                                   "CharSet=utf8mb4;";

        using (var connection = new MySqlConnection(connectionString))
        {
            connection.Open();

            string query = @"
            SELECT UserID
            FROM GroupUsers
            WHERE GroupID = @GroupID";

            using (var command = new MySqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@GroupID", groupId);

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        members.Add(reader.GetInt32("UserID"));
                    }
                }
            }
        }

        return members;
    }

    private void SaveGroupMessageToDatabase(int senderId, int groupId, string messageText)
    {
        string connectionString = "Server=sql8.freesqldatabase.com;" +
                                   "Database=sql8771867;" +
                                   "User=sql8771867;" +
                                   "Password=zhx9FVLUs5;" +
                                   "Port=3306;" +
                                   "CharSet=utf8mb4;";

        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                connection.Open();

                string query = @"
                INSERT INTO Messages (SenderID, GroupID, MessageText, CreatedAt)
                VALUES (@SenderID, @GroupID, @MessageText, NOW())";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SenderID", senderId);
                    command.Parameters.AddWithValue("@GroupID", groupId);
                    command.Parameters.AddWithValue("@MessageText", messageText);

                    command.ExecuteNonQuery();
                }
            }
            Console.WriteLine($"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {senderId} –¥–ª—è –≥—Ä—É–ø–ø—ã {groupId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã: {ex.Message}");
        }
    }

    private void SaveMessageToDatabase(int senderId, int receiverId, string messageText)
    {
        string connectionString = "Server=sql8.freesqldatabase.com;" +
                                   "Database=sql8771867;" +
                                   "User=sql8771867;" +
                                   "Password=zhx9FVLUs5;" +
                                   "Port=3306;" +
                                   "CharSet=utf8mb4;";

        try
        {
            using (var connection = new MySqlConnection(connectionString))
            {
                connection.Open();

                string query = @"
                INSERT INTO Messages (SenderID, ReceiverID, MessageText, CreatedAt)
                VALUES (@SenderID, @ReceiverID, @MessageText, NOW())";

                using (var command = new MySqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SenderID", senderId);
                    command.Parameters.AddWithValue("@ReceiverID", receiverId);
                    command.Parameters.AddWithValue("@MessageText", messageText);

                    command.ExecuteNonQuery();
                }
            }
            Console.WriteLine($"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {senderId} –∫ {receiverId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex.Message}");
        }
    }
}

public class Program
{
    public static async Task Main(string[] args)
    {
        var server = new Server("127.0.0.1", 8888);

        try
        {
            await server.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {ex.Message}");
        }
    }
}
